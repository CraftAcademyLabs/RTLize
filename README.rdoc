= RTLize

{<img src="https://travis-ci.org/maljub01/RTLize.png?branch=master" alt="Build Status" />}[https://travis-ci.org/maljub01/RTLize]

RTLize is a Rails plugin that allows you to write your stylesheets for left-to-right (LTR) layouts and have them automatically work for right-to-left (RTL) layouts as well. It does this by mirroring all the properties and values to their RTL equivalent.

== Usage

To add RTLize to your Rails application, all you need to do is add the following line to your Gemfile (and run `bundle install` of course):

  gem 'rtlize'

Next you'll need to make symbolic links (or copies if you must) of your stylesheets with the '.css' extension replaced with '.rtl.css':

  ln -s sheet1.css sheet1.rtl.css
  ln -s sheet2.css.sass sheet2.rtl.css.sass
  ...

And you're all set! Now when you request the assets 'sheet1.rtl.css' and 'sheet2.rtl.css' you will receive an RTLized version of the original.

=== Manually overriding the CSS

When writing your CSS, you will often encounter cases where you need to manually override the CSS for rtl, to change a background image for example. To do this, you can use the rtl class. The RTLizer wont transform any CSS rule that mentions the class 'rtl'. Notice that you'll need to manually add an 'rtl' class to your HTML tags that will use this (usually to the html or body tag).

=== Preserving the layout for some sections of your markup

You might also find that you need to perserve the layout on certain parts of your website. To do this, you'll need to tell the RTLizer about the CSS files/rules you don't want switched. You can do this using the no-rtl directive. The way this works is that whenever the RTLizer finds the following comment:
  /*!= begin(no-rtl) */
it wont transform all the CSS rules that follow until it reaches the comment:
  /*!= end(no-rtl) */
after which it will return to transforming the CSS rules it finds as normal.

A few issues to keep in mind when using the no-rtl directive is that, depending on your CSS preprocessor if you use one, you might need to add an extra !. You should also avoid adding those comments except at the top-level of your nested declarations for them to work properly. For example, using SASS, the no-rtl directives look like this:

  .top-level-class
    .child-class-1
      margin-left: 1px // This rule will be transformed to "margin-right: 1px"

  /*!!= begin(no-rtl) */
  .top-level-class
    .child-class-2
       float: left // This rule wont be transformed
  /*!!= end(no-rtl) */

  .another-top-level-class
    span
      padding-right: 5px // This rule will be transformed to "padding-left: 5px"


== RTLize in the wild!

Jawaker (an Arabic card game website) uses RTLize to automatically generate CSS files for the right-to-left (Arabic) layout of the website. You can get an idea of how RTLize works by comparing {the English interface}[http://www.jawaker.com/en] with {the Arabic one}[http://www.jawaker.com/ar]. Jawaker utilizes all the main features of RTLize: most the CSS is layout-switched automatically, with some manually-specified switching for images. Also, some parts (the game table, for example) has the same layout in both Arabic and English (to preserve playing order).

== TODO

* Add examples, including a sample application.
* Use a proper CSS parser.
* Improve behavior & documentation of the no-rtl directive.
* Add helper methods in both Rails & JS that would take a string (or a hash) of CSS declarations and convert them to the equivalent RTLized version. This is in order to extend the RTLization support to inline styles as well as dynamic CSS changes.

== Credits

* This project was inspired by {Dustin Diaz's R2}[http://github.com/ded/R2]. The initial version was in fact not much more than a ruby port of R2.

== License

This project rocks and uses MIT-LICENSE.
